"use client";

import React, { useState, useEffect } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import {
  Clock,
  FileQuestion,
  Activity,
  Database,
  Eye,
  Award,
  ChevronLeft,
  ChevronRight,
} from "lucide-react";
import SqlEditor from "@/app/Components/SQL_Compiler/SqlEditor";
import Logo from "@/app/Components/Logo";
import QuestionsTab from "./Components/QuestionsTab";

const ContestPage = () => {
  const [timeLeft, setTimeLeft] = useState({
    hours: 1,
    minutes: 30,
    seconds: 0,
  });
  const [currentQuestion, setCurrentQuestion] = useState(1);
  const [sqlQuery, setSqlQuery] = useState("");
  const [sqlMode, setSqlMode] = useState("mysql");
  const [submitted, setSubmitted] = useState(false);

  // Mock questions for the contest
  const questions = [
    {
      id: 1,
      title: "Find all users who made a purchase in the last 30 days",
      description:
        "Write a SQL query to retrieve all users who made at least one purchase in the last 30 days. Include their user ID, name, email, and total purchase amount.",
      difficulty: "Easy",
      points: 10,
    },
    {
      id: 2,
      title: "Calculate average order value by category",
      description:
        "Write a SQL query to calculate the average order value grouped by product category. Sort the results by average order value in descending order.",
      difficulty: "Medium",
      points: 20,
    },
    {
      id: 3,
      title: "Find products with inventory anomalies",
      description:
        "Write a SQL query to identify products where the current inventory count doesn't match the calculated inventory based on purchase and sales records.",
      difficulty: "Hard",
      points: 30,
    },
  ];

  // Mock schema
  const schema = [
    {
      table: "users",
      columns: ["user_id", "username", "email", "created_at", "last_login"],
    },
    {
      table: "products",
      columns: [
        "product_id",
        "name",
        "description",
        "category",
        "price",
        "inventory",
      ],
    },
    {
      table: "orders",
      columns: ["order_id", "user_id", "total_amount", "status", "created_at"],
    },
    {
      table: "order_items",
      columns: ["id", "order_id", "product_id", "quantity", "price"],
    },
  ];

  // Timer countdown effect
  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev.hours === 0 && prev.minutes === 0 && prev.seconds === 0) {
          clearInterval(timer);
          return prev;
        }

        let newHours = prev.hours;
        let newMinutes = prev.minutes;
        let newSeconds = prev.seconds - 1;

        if (newSeconds < 0) {
          newSeconds = 59;
          newMinutes -= 1;
        }

        if (newMinutes < 0) {
          newMinutes = 59;
          newHours -= 1;
        }

        return { hours: newHours, minutes: newMinutes, seconds: newSeconds };
      });
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  // Format time with leading zeros
  const formatTime = (val) => val.toString().padStart(2, "0");

  const handleSubmit = () => {
    setSubmitted(true);
    // Here you would normally send the query to your backend for validation
    setTimeout(() => {
      setSubmitted(false);
      // Move to next question
      if (currentQuestion < questions.length) {
        setCurrentQuestion(currentQuestion + 1);
      }
    }, 2000);
  };

  const handleRun = () => {
    // Logic for running the query without submitting
    console.log("Running query:", sqlQuery);
  };

  const navigateQuestion = (direction) => {
    if (direction === "next" && currentQuestion < questions.length) {
      setCurrentQuestion(currentQuestion + 1);
    } else if (direction === "prev" && currentQuestion > 1) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  // Get difficulty styling
  const getDifficultyStyles = (difficulty) => {
    switch (difficulty) {
      case "Easy":
        return "bg-green-500/30 text-green-200";
      case "Medium":
        return "bg-yellow-500/30 text-yellow-200";
      case "Hard":
        return "bg-red-500/30 text-red-200";
      default:
        return "bg-gray-500/30 text-gray-200";
    }
  };

  return (
    <div className="min-h-screen text-white">
      {/* Header with logo and contest info */}
      <header className="bg-red-900/30 border-b border-red-500/30 p-4">
        <div className="container mx-auto flex justify-between items-center">
          <div className="flex items-center space-x-3">
            <div className="w-12 h-12 flex items-center justify-center">
              {/* <Database className="w-8 h-8" /> */}
              <Logo extraClasses="h-12 w-12" />
            </div>
            <div>
              <h1 className="text-2xl font-bold">SQL Masters Challenge</h1>
              <p className="text-red-300">Database Contest - Advanced Level</p>
            </div>
          </div>

          <div className="flex flex-col items-end">
            <div className="flex items-center space-x-2 text-red-200">
              <Clock className="w-5 h-5" />
              <span className="text-xl font-mono">
                {formatTime(timeLeft.hours)}:{formatTime(timeLeft.minutes)}:
                {formatTime(timeLeft.seconds)}
              </span>
            </div>
            <div className="text-sm text-red-300">Time remaining</div>
          </div>
        </div>
      </header>

      <main className="container mx-auto p-4">
        <Tabs defaultValue="questions" className="w-full">
          <TabsList className="text-white bg-red-500/20 border border-red-500/30 p-1 mb-6">
            <TabsTrigger
              value="questions"
              className="data-[state=active]:bg-red-500 data-[state=active]:text-white"
            >
              <FileQuestion className="w-4 h-4 mr-2" />
              Questions
            </TabsTrigger>
            <TabsTrigger
              value="status"
              className="data-[state=active]:bg-red-500 data-[state=active]:text-white"
            >
              <Activity className="w-4 h-4 mr-2" />
              Status
            </TabsTrigger>
            <TabsTrigger
              value="ddl"
              className="data-[state=active]:bg-red-500 data-[state=active]:text-white"
            >
              <Database className="w-4 h-4 mr-2" />
              DDL Statements
            </TabsTrigger>
            <TabsTrigger
              value="schema"
              className="data-[state=active]:bg-red-500 data-[state=active]:text-white"
            >
              <Eye className="w-4 h-4 mr-2" />
              Visualize Schema
            </TabsTrigger>
          </TabsList>

          <QuestionsTab
            currentQuestion={currentQuestion}
            questions={questions}
            sqlQuery={sqlQuery}
            setSqlQuery={setSqlQuery}
            sqlMode={sqlMode}
            setSqlMode={setSqlMode}
            handleRun={handleRun}
            handleSubmit={handleSubmit}
            submitted={submitted}
            getDifficultyStyles={getDifficultyStyles}
            navigateQuestion={navigateQuestion}
          />

          {/* <TabsContent value="questions" className="space-y-4">
            <div className="flex justify-between items-center mb-4">
              <div className="flex items-center space-x-4">
                <Button
                  variant="outline"
                  onClick={() => navigateQuestion("prev")}
                  disabled={currentQuestion === 1}
                  className="hover:border-red-500/50 bg-white text-black hover:bg-red-900/30 hover:text-white"
                >
                  <ChevronLeft className="mr-1" /> Previous
                </Button>
                <div className="px-4 py-2 bg-red-900/20 rounded-md border border-red-500/30">
                  Question {currentQuestion} of {questions.length}
                </div>
                <Button
                  variant="outline"
                  onClick={() => navigateQuestion("next")}
                  disabled={currentQuestion === questions.length}
                  className="hover:border-red-500/50 bg-white text-black hover:bg-red-900/30 hover:text-white"
                >
                  Next <ChevronRight className="ml-1" />
                </Button>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-red-300 flex items-center">
                  <Award className="w-4 h-4 mr-1" />
                  {questions[currentQuestion - 1].points} pts
                </span>
                <span
                  className={`px-2 py-1 rounded text-xs font-bold ${getDifficultyStyles(
                    questions[currentQuestion - 1].difficulty
                  )}`}
                >
                  {questions[currentQuestion - 1].difficulty}
                </span>
              </div>
            </div>

            <Card className="bg-black/40 border border-red-500/30">
              <CardContent className="p-6">
                <h3 className="text-xl font-bold mb-2 text-white">
                  {questions[currentQuestion - 1].title}
                </h3>
                <p className="text-gray-300 mb-6">
                  {questions[currentQuestion - 1].description}
                </p>

                <h4 className="text-lg font-semibold mb-2 text-red-300">
                  Your Solution
                </h4>
                <div className="mb-4">
                  <SqlEditor
                    query={sqlQuery}
                    setQuery={setSqlQuery}
                    sqlMode={sqlMode}
                    setSqlMode={setSqlMode}
                  />
                </div>

                <div className="flex justify-end space-x-4 mt-6">
                  <Button
                    variant="outline"
                    onClick={handleRun}
                    className="hover:border-red-500/50 text-black hover:bg-red-900/30 hover:text-white"
                  >
                    Run Query
                  </Button>
                  <Button
                    onClick={handleSubmit}
                    disabled={submitted}
                    className={`bg-red-500 hover:bg-red-600 text-white ${
                      submitted ? "opacity-50 cursor-not-allowed" : ""
                    }`}
                  >
                    {submitted ? "Submitting..." : "Submit Answer"}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent> */}

          <TabsContent value="status">
            <Card className="bg-black/40 border border-red-500/30">
              <CardContent className="p-6">
                <h3 className="text-xl font-bold mb-4 text-center text-white">
                  Contest Progress
                </h3>
                <div className="space-y-4">
                  {questions.map((q) => (
                    <div
                      key={q.id}
                      className="flex items-center justify-between p-3 border border-red-500/20 rounded-lg"
                    >
                      <div>
                        <h4 className="font-medium text-white">
                          Question {q.id}: {q.title}
                        </h4>
                        <div className="flex items-center mt-1 space-x-2">
                          <span
                            className={`px-2 py-0.5 rounded text-xs ${getDifficultyStyles(
                              q.difficulty
                            )}`}
                          >
                            {q.difficulty}
                          </span>
                          <span className="text-red-300 text-sm">
                            {q.points} points
                          </span>
                        </div>
                      </div>
                      <div className="flex items-center">
                        {currentQuestion > q.id ? (
                          <span className="bg-green-500/30 text-green-200 px-3 py-1 rounded-full text-sm">
                            Completed
                          </span>
                        ) : currentQuestion === q.id ? (
                          <span className="bg-yellow-500/30 text-yellow-200 px-3 py-1 rounded-full text-sm">
                            In Progress
                          </span>
                        ) : (
                          <span className="bg-gray-500/30 text-gray-300 px-3 py-1 rounded-full text-sm">
                            Not Started
                          </span>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="ddl">
            <Card className="bg-black/40 border border-red-500/30">
              <CardContent className="p-6">
                <h3 className="text-xl font-bold mb-4 text-center text-white">
                  Database Schema Creation
                </h3>
                <pre className="bg-red-900/10 p-4 rounded-lg border border-red-500/20 overflow-x-auto text-gray-200">
                  {`CREATE TABLE users (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) UNIQUE NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  last_login TIMESTAMP
);

CREATE TABLE products (
  product_id INT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  category VARCHAR(50),
  price DECIMAL(10, 2) NOT NULL,
  inventory INT NOT NULL DEFAULT 0
);

CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  total_amount DECIMAL(10, 2) NOT NULL,
  status VARCHAR(20) DEFAULT 'pending',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE order_items (
  id INT PRIMARY KEY,
  order_id INT NOT NULL,
  product_id INT NOT NULL,
  quantity INT NOT NULL,
  price DECIMAL(10, 2) NOT NULL,
  FOREIGN KEY (order_id) REFERENCES orders(order_id),
  FOREIGN KEY (product_id) REFERENCES products(product_id)
);`}
                </pre>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="schema">
            <Card className="bg-black/40 border border-red-500/30">
              <CardContent className="p-6">
                <h3 className="text-xl font-bold mb-4 text-center text-white">
                  Database Schema Visualization
                </h3>

                <div className="flex flex-wrap gap-6 justify-center">
                  {schema.map((table) => (
                    <div
                      key={table.table}
                      className="border border-red-500/30 rounded-lg p-4 w-64 bg-red-900/10"
                    >
                      <h4 className="text-lg font-bold mb-2 text-red-300 border-b border-red-500/30 pb-2">
                        {table.table}
                      </h4>
                      <ul className="space-y-1">
                        {table.columns.map((column) => (
                          <li
                            key={column}
                            className="text-sm flex items-center text-gray-200"
                          >
                            <span className="w-2 h-2 bg-red-500 rounded-full mr-2"></span>
                            {column}
                          </li>
                        ))}
                      </ul>
                    </div>
                  ))}
                </div>

                <div className="mt-8 border-t border-red-500/30 pt-4">
                  <h4 className="text-lg font-bold mb-2 text-center text-red-300">
                    Relationships
                  </h4>
                  <div className="flex justify-center">
                    <svg width="600" height="200" className="opacity-80">
                      <line
                        x1="100"
                        y1="50"
                        x2="300"
                        y2="50"
                        stroke="#ef4444"
                        strokeWidth="2"
                      />
                      <line
                        x1="300"
                        y1="50"
                        x2="300"
                        y2="150"
                        stroke="#ef4444"
                        strokeWidth="2"
                      />
                      <line
                        x1="300"
                        y1="150"
                        x2="500"
                        y2="150"
                        stroke="#ef4444"
                        strokeWidth="2"
                      />
                      <line
                        x1="500"
                        y1="50"
                        x2="500"
                        y2="150"
                        stroke="#ef4444"
                        strokeWidth="2"
                      />

                      <circle
                        cx="100"
                        cy="50"
                        r="30"
                        fill="#450a0a"
                        stroke="#ef4444"
                        strokeWidth="2"
                      />
                      <circle
                        cx="300"
                        cy="50"
                        r="30"
                        fill="#450a0a"
                        stroke="#ef4444"
                        strokeWidth="2"
                      />
                      <circle
                        cx="300"
                        cy="150"
                        r="30"
                        fill="#450a0a"
                        stroke="#ef4444"
                        strokeWidth="2"
                      />
                      <circle
                        cx="500"
                        cy="50"
                        r="30"
                        fill="#450a0a"
                        stroke="#ef4444"
                        strokeWidth="2"
                      />
                      <circle
                        cx="500"
                        cy="150"
                        r="30"
                        fill="#450a0a"
                        stroke="#ef4444"
                        strokeWidth="2"
                      />

                      <text
                        x="100"
                        y="55"
                        textAnchor="middle"
                        fill="white"
                        fontSize="12"
                      >
                        users
                      </text>
                      <text
                        x="300"
                        y="55"
                        textAnchor="middle"
                        fill="white"
                        fontSize="12"
                      >
                        orders
                      </text>
                      <text
                        x="300"
                        y="155"
                        textAnchor="middle"
                        fill="white"
                        fontSize="12"
                      >
                        order_items
                      </text>
                      <text
                        x="500"
                        y="55"
                        textAnchor="middle"
                        fill="white"
                        fontSize="12"
                      >
                        products
                      </text>

                      <text
                        x="200"
                        y="40"
                        textAnchor="middle"
                        fill="#fca5a5"
                        fontSize="10"
                      >
                        user_id
                      </text>
                      <text
                        x="290"
                        y="100"
                        textAnchor="middle"
                        fill="#fca5a5"
                        fontSize="10"
                      >
                        order_id
                      </text>
                      <text
                        x="400"
                        y="140"
                        textAnchor="middle"
                        fill="#fca5a5"
                        fontSize="10"
                      >
                        product_id
                      </text>
                      <text
                        x="490"
                        y="100"
                        textAnchor="middle"
                        fill="#fca5a5"
                        fontSize="10"
                      >
                        product_id
                      </text>
                    </svg>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  );
};

export default ContestPage;
